# shell cmd
tree -L 2 --dirsfirst

ðŸ“‚ Folder Structure
image_processor/
â”‚â”€â”€ app/
â”‚   â”œâ”€â”€ api/
â”‚   â”‚   â”œâ”€â”€ routes/
â”‚   â”‚   â”‚   â”œâ”€â”€ upload.py
â”‚   â”‚   â”‚   â”œâ”€â”€ metadata.py
â”‚   â”‚   â”‚   â”œâ”€â”€ slice.py
â”‚   â”‚   â”‚   â”œâ”€â”€ analyze.py
â”‚   â”‚   â”‚   â”œâ”€â”€ statistics.py
â”‚   â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”œâ”€â”€ core/
â”‚   â”‚   â”œâ”€â”€ config.py
â”‚   â”‚   â”œâ”€â”€ database.py
â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”œâ”€â”€ services/
â”‚   â”‚   â”œâ”€â”€ image_processor.py
â”‚   â”‚   â”œâ”€â”€ storage.py
â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”œâ”€â”€ models/
â”‚   â”‚   â”œâ”€â”€ image.py
â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”œâ”€â”€ main.py
â”‚â”€â”€ data/
â”‚   â”œâ”€â”€ uploads/
â”‚   â”œâ”€â”€ processed/
â”‚â”€â”€ tests/
â”‚   â”œâ”€â”€ test_api.py
â”‚   â”œâ”€â”€ test_image_processor.py
â”‚â”€â”€ notebooks/
â”‚   â”œâ”€â”€ image_analysis_demo.ipynb
â”‚â”€â”€ requirements.txt
â”‚â”€â”€ README.md
â”‚â”€â”€ .env
â”‚â”€â”€ Dockerfile
â”‚â”€â”€ docker-compose.yml


mkdir -p image_processor/{app/api/routes,app/core,app/services,app/models,data/uploads,data/processed,tests,notebooks}

touch image_processor/app/api/routes/{upload.py,metadata.py,slice.py,analyze.py,statistics.py,__init__.py}
touch image_processor/app/core/{config.py,database.py,__init__.py}
touch image_processor/app/services/{image_processor.py,storage.py,__init__.py}
touch image_processor/app/models/{image.py,__init__.py}
touch image_processor/app/main.py
touch image_processor/tests/{test_api.py,test_image_processor.py}
touch image_processor/notebooks/image_analysis_demo.ipynb
touch image_processor/{requirements.txt,README.md,.env,Dockerfile,docker-compose.yml}


pip install fastapi[all] uvicorn pillow numpy opencv-python-headless tifffile pydantic sqlalchemy alembic celery redis
uvicorn app.main:app --reload


deactivate  # If active      
source venv/bin/activate  # macOS/Linux
PYTHONPATH=$(pwd) uvicorn app.main:app --reload

http://127.0.0.1:8000/docs

#Run the following command to initialize Alembic in your project:
alembic init alembic

This creates a directory structure like:
/alembic
  â”œâ”€â”€ versions/  # Stores migration files
  â”œâ”€â”€ env.py  # Config file for running migrations
  â”œâ”€â”€ script.py.mako  # Template for generating migrations
alembic.ini  # Main Alembic configuration file

# Modify alembic.ini
sqlalchemy.url = sqlite:///./test.db  # For SQLite
# sqlalchemy.url = postgresql://user:password@localhost/dbname


# Modify env.py
from app.core.database import Base
from app.models import *
target_metadata = Base.metadata

# This generates a migration file inside alembic/versions/ with the detected schema.
alembic revision --autogenerate -m "Initial migration"

# This applies the migration to create tables in the database.
alembic upgrade head


# full reset
rm test.db
rm -rf alembic/versions/*
alembic revision --autogenerate -m "Initial migration"
alembic upgrade head


# fake migration

# fixed: revision id
sqlite3 test.db
SELECT * FROM alembic_version;
DELETE FROM alembic_version WHERE version_num = '9fc33d5624f8';
UPDATE alembic_version SET version_num = '<latest_valid_revision>';
.exit

alembic revision --autogenerate -m "Initial migration"
alembic stamp head # This will mark the latest migration as applied, effectively making it "fake" by skipping the actual database changes.
alembic stamp <revision_id> # Replace <revision_id> with the revision identifier you want to mark as applied (you can find it in the migration file name or in the Alembic history).
alembic history --verbose

fastapi_project/
â”œâ”€â”€ app/
â”‚   â”œâ”€â”€ __init__.py
â”‚   â”œâ”€â”€ main.py                 # Entry point: creates the FastAPI app and includes routers
â”‚   â”‚
â”‚   â”œâ”€â”€ api/                    # API layer: endpoints, dependencies, and versioning
â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”œâ”€â”€ deps.py             # Global dependencies (e.g., authentication)
â”‚   â”‚   â”œâ”€â”€ v1/                 # Version 1 of API
â”‚   â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”‚   â”œâ”€â”€ endpoints/      # Route definitions
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ items.py
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ users.py
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ images.py
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ analytics.py
â”‚   â”‚   â”‚   â”œâ”€â”€ routers.py      # Registers all routers in one place
â”‚   â”‚
â”‚   â”œâ”€â”€ core/                   # Core configuration and utilities
â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”œâ”€â”€ config.py           # App settings using Pydantic BaseSettings
â”‚   â”‚   â”œâ”€â”€ database.py         # Database connection (SQLAlchemy/PostgreSQL)
â”‚   â”‚   â”œâ”€â”€ celery_config.py    # Celery configuration
â”‚   â”‚
â”‚   â”œâ”€â”€ schemas/                # Centralized Pydantic schemas (decoupled from API versions)
â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”œâ”€â”€ item_schema.py
â”‚   â”‚   â”œâ”€â”€ user_schema.py
â”‚   â”‚   â”œâ”€â”€ image_schema.py
â”‚   â”‚   â”œâ”€â”€ analytics_schema.py
â”‚   â”‚
â”‚   â”œâ”€â”€ models/                 # ORM models (SQLAlchemy models)
â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”œâ”€â”€ item_model.py
â”‚   â”‚   â”œâ”€â”€ user_model.py
â”‚   â”‚   â”œâ”€â”€ image_model.py
â”‚   â”‚   â”œâ”€â”€ analytics_model.py
â”‚   â”‚
â”‚   â”œâ”€â”€ repositories/           # Data access layer (CRUD operations)
â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”œâ”€â”€ item_repository.py
â”‚   â”‚   â”œâ”€â”€ user_repository.py
â”‚   â”‚   â”œâ”€â”€ image_repository.py
â”‚   â”‚   â”œâ”€â”€ analytics_repository.py
â”‚   â”‚
â”‚   â”œâ”€â”€ services/               # Business logic layer
â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”œâ”€â”€ item_service.py
â”‚   â”‚   â”œâ”€â”€ user_service.py
â”‚   â”‚   â”œâ”€â”€ image_service.py
â”‚   â”‚   â”œâ”€â”€ analytics_service.py
â”‚   â”‚
â”‚   â”œâ”€â”€ tasks/                  # Background tasks (Celery tasks)
â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”œâ”€â”€ item_task.py
â”‚   â”‚   â”œâ”€â”€ user_task.py
â”‚   â”‚   â”œâ”€â”€ image_task.py
â”‚   â”‚   â”œâ”€â”€ analytics_task.py
â”‚   â”‚
â”‚   â”œâ”€â”€ workers/                # Celery worker entry points
â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”œâ”€â”€ worker.py
â”‚   â”‚
â”‚   â”œâ”€â”€ utils/                   # Helper functions (e.g., logging, common utilities)
â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”œâ”€â”€ logger.py
â”‚   â”‚   â”œâ”€â”€ file_handler.py
â”‚   â”‚
â”‚   â”œâ”€â”€ middleware/               # Custom middleware (e.g., logging, error handling)
â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”œâ”€â”€ error_handler.py
â”‚   â”‚   â”œâ”€â”€ logging_middleware.py
â”‚
â”‚â”€â”€ notebooks/
â”‚   â”œâ”€â”€ image_analysis_notebook.ipynb
â”‚   â”‚
â”œâ”€â”€ tests/                        # Automated tests (unit & integration tests)
â”‚   â”œâ”€â”€ __init__.py
â”‚   â”œâ”€â”€ test_items.py
â”‚   â”œâ”€â”€ test_users.py
â”‚   â”œâ”€â”€ test_images.py
â”‚   â”œâ”€â”€ test_analytics.py
â”‚
â”‚â”€â”€ docker-compose.yml      # Docker Setup (FastAPI, Redis, Celery)
â”‚â”€â”€ Dockerfile              # FastAPI Docker Image
â”‚â”€â”€ requirements.txt        # Dependencies
â”‚â”€â”€ .env                    # Environment Variables
â”‚â”€â”€ README.md               # Documentation
